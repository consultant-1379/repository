<project name="repository" default="compile" xmlns:sonar="antlib:org.sonar.ant">

  <property name="pack.name" value="repository"/>
  <property name="pack.version" value="5-0-0"/>
  
  <property name="vobs.plat" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_repository_build"/>
  <property name="vobs.3pp" value="/proj/eiffel013_config_fem6s11/3pp"/>
  
  <!-- Attention! pack.dir have to be under tmp-dir because the actual build is done there --> 
  <property name="pack.dir" value="${vobs.plat}/repository/dev"/>

  <!-- ENIQ Jars -->
  <property name="eniq.common_utilities.dir" value="${vobs.plat}/common_utilities/build/common_utilities/"/>
  <property name="eniq.admin_ui.dir" value="${vobs.plat}/admin_ui/build/admin_ui/"/>

  <!-- 3PP Jars -->  
  <property name="3pp.velocity.dir" value="${vobs.3pp}/apache/jakarta_velocity/v1_7/prod"/>
  <property name="3pp.appframework.dir" value="${vobs.3pp}/appframework/prod" />

  <target name="precompile">
  	<!--<delete file="${pack.dir}/RELEASE_NOTES"/>-->
  </target>
  
  <target name="compile">
     <mkdir dir="${pack.dir}/classes"/>
     <javac srcdir="${pack.dir}/src" destdir="${pack.dir}/classes"
            failonerror="true"
            debug="true"
            deprecation="off">
<compilerarg value="-Xlint:all" />
<compilerarg line="-Xmaxwarns 1000" />
       <classpath>
         <pathelement path="${classpath}"/>
		 <fileset dir="${eniq.common_utilities.dir}">
				<include name="**/*.jar"/>
		 </fileset>
		 <fileset dir="${3pp.velocity.dir}">
				<include name="**/*.jar"/>
		 </fileset>
       	<fileset dir="${3pp.appframework.dir}">
       			<include name="**/*.jar" />
       	</fileset>
		<fileset dir="${eniq.admin_ui.dir}">
       	       	<include name="**/AdminUI.jar" />
       	</fileset>
	</classpath>
     </javac>
  </target>

  <target name="postcompile">
  </target>

    <!-- ========= Define the main properties of this project ========= -->
    <property name="src.dir" value="src" />
    <property name="build.dir" value="target" />
    <property name="classes.dir" value="${build.dir}/classes" />

    <!-- Define the SonarQube global properties (the most usual way is to pass these properties via the command line) -->
    <property name="sonar.host.url" value="https://sonarqube.lmera.ericsson.se" />

    <!-- Define the Sonar properties -->
    <property name="sonar.projectKey" value="sonarqube-scanner-repository" />
    <property name="sonar.projectName" value="Eniq Repository" />
    <property name="sonar.projectVersion" value="1.0" />
    <property name="sonar.sources" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_repository_build/repository/dev/src" />
    <property name="sonar.java.binaries" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_repository_build/repository/dev" />
    <property name="sonar.sourceEncoding" value="UTF-8" />
    <property name="sonar.login" value="b140730794b2b53dc841840498358c11213d3ba9" />
    <property name="sonar.projectBaseDir" value="/proj/eiffel013_config_fem6s11/eiffel_home/jobs/Git_repository_build/repository/dev" />

     <target name="compile_sonar">
         <javac srcdir="${pack.dir}/src" destdir="${pack.dir}/classes" fork="true" debug="true" includeAntRuntime="false" />
     </target>

     <!-- ========= Define SonarQube Scanner for Ant Target ========= -->
     <target name="sonar">
         <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
             <classpath path="/proj/esjkadm100/Sonar/sonarqube-ant-task-2.7.0.1612.jar" />
         </taskdef>

         <!-- Execute SonarQube Scanner for Ant Analysis -->
         <sonar:sonar />
     </target>
    <target name="clean">
        <delete dir="${pack.dir}/classes"/>
    </target>


     <!-- ========= The main target "all" ========= -->
     <target name="all_sonar" depends="sonar,clean" />



<target name="sonarQualityCheck" description="SonarQube Quality Gate check"> 
	 <exec executable="/bin/sh" outputproperty="qualitySleep"> 
		 <arg value="-c" /> 
		 <arg value="sleep 60" /> 
	 </exec>
	<exec executable="curl" outputproperty="sonarreturnCode">
		<arg value="-o" />
		<arg value="/proj/esjkadm100/Sonar/sonarOut.txt" />
		<arg value="-k" />
        <arg value="-u" />
        <arg value="${sonar.login}:" />
        <arg value="https://sonarqube.lmera.ericsson.se/api/qualitygates/project_status?projectKey=${sonar.projectKey}" />
    </exec>
    <exec executable="/bin/sh" outputproperty="sonarCode">
        <arg value="-c" />
        <arg value="/proj/eiffel013_config_fem6s11/tools/sonarQualityGateCheck.sh" />
    </exec>
    <echo message="Quality report returned ${sonarCode}"/>
    <condition property="qualityMatch">
        
            <equals arg1="${sonarCode}" arg2="ERROR"/>
        
    </condition>
    <fail if="qualityMatch" message="Quality check did not pass, hence marking build as failed!!!."/>
</target>

</project>
