#!/bin/bash
# ********************************************************************
# Ericsson Radio Systems AB                                     SCRIPT
# ********************************************************************
#
#
# (c) Ericsson Radio Systems AB 2018 - All rights reserved.
#
# The copyright to the computer program(s) herein is the property
# of Ericsson Radio Systems AB, Sweden. The programs may be used 
# and/or copied only with the written permission from Ericsson Radio 
# Systems AB or in accordance with the terms and conditions stipulated 
# in the agreement/contract under which the program(s) have been 
# supplied.
#
# ********************************************************************
# Name    : ChangeUserPasswordInRepdb
# Date    : 13/07/2020(dummy date) Last modified 25/04/2023
# Purpose : Ericsson Network IQ utility to change the User Password in repdb
# Usage   : ChangeUserPasswordsInRepdb -u <USERNAME>
# ********************************************************************

TIMESTAMP=`date +%d.%m.%Y`
LOGFILE=/eniq/log/sw_log/engine/repdb_user_password_${TIMESTAMP}.log
if [ -s /eniq/admin/lib/common_functions.lib ]; then
  . /eniq/admin/lib/common_functions.lib
else
  EchoText "Could not find /eniq/admin/lib/common_functions.lib"
  exit 2
fi
EchoText() {
   echo -e $*
   echo -e `date '+%Y-%m-%d %H:%M:%S': ` $* >> ${LOGFILE}
}
########################################################################
# Function: usage_msg
# Displays the usage message
#
# Arguments: None
#
# Return Values: None
usage_msg() {
	EchoText "Usage: "
	EchoText "ChangeUserPasswordsInRepdb -u <USERNAME>"
	EchoText "u: User Name"
	remove_lock_file
	
	exit 10
}
########################################################################
# Function: remove_connection_string_file
# Displays the usage message
#
# Arguments: None
#
# Return Values: None
remove_connection_string_file() {
	if [ -f $connection_string ]; then 
		rm -rf $connection_string
		if [ $? != 0 ]; then
		  EchoText "Unable to delete " $connection_string
		fi
	fi
}
trap remove_connection_string_file EXIT
########################################################################
# Function: configure_java
# Configures the environment for executing Java directly from bash.
# 
# Arguments: None
# 
# Return Values: None
configure_java() {
  CPATH="${INSTALLER_DIR}/lib/installer.jar"
  DIRS=`ls ${PLATFORM_DIR}`
  for file in $DIRS
  do
    if [ -d ${PLATFORM_DIR}/$file/dclib ]
    then
	  JARS=`ls ${PLATFORM_DIR}/$file/dclib/*.jar`
	  for jar in $JARS
	  do
	    CPATH="${CPATH}:${jar}"
	  done
    fi
  done
  JAVA_HOME=${RT_DIR}/java
  export JAVA_HOME
  PATH=${RT_DIR}/java/bin:${PATH}
  export PATH
}
########################################################################
# Function: encrypt_all_passwords
# Encrypts all the un-encrypted passwords in Meta_Databases Table in etlrep
# 
# Arguments: None
# 
# Return Values: None
encrypt_all_passwords() {
  
  if [ -s /eniq/admin/lib/common_functions.lib ]; then
    . /eniq/admin/lib/common_functions.lib
  else
    EchoText "Could not find /eniq/admin/lib/common_functions.lib"
	remove_lock_file
    exit 2
  fi
  ETLREPUSER=`inigetpassword REP -v ETLREPUsername -f ${CONF_DIR}/niq.ini`
  ETLREPPASSWORD=`inigetpassword REP -v ETLREPPassword -f ${CONF_DIR}/niq.ini`
  REP_PORT=`iniget REP -v PortNumber -f ${CONF_DIR}/niq.ini`
  REP_SERVER_NAME=`iniget REP -v ServerName -f ${CONF_DIR}/niq.ini`
  
  connection_string_decrypt="-c \"eng=${REP_SERVER_NAME};links=tcpip{host=${REP_SERVER_NAME};port=${REP_PORT}};uid=$ETLREPUSER;pwd=$ETLREPPASSWORD\" -onerror exit -nogui"
  connection_string=/var/tmp/encrypt_$$.file  
  get_encrypt_file "${connection_string_decrypt}" "${connection_string}"
  
  ## Need to ensure that all the services except repdb is stopped before the sql is executed.
  
  ## Add the Encryption_Flag column to Meta_Databases Table in etlrep if it doesn't exists already
  ## Increase the length of the PASSWORD column from 30 to 128
  $DBISQL @${connection_string} "IF COL_LENGTH('ETLREP.META_DATABASES', 'ENCRYPTION_FLAG') IS NULL
		  BEGIN
		    ALTER TABLE ETLREP.META_DATABASES ADD ENCRYPTION_FLAG VARCHAR(2) DEFAULT 'N' NOT NULL
		  END
		  IF COL_LENGTH('ETLREP.META_DATABASES', 'PASSWORD') <> 128
		  BEGIN
		    ALTER TABLE ETLREP.META_DATABASES MODIFY PASSWORD VARCHAR(128)
		  END" > /dev/null 2>&1
  exitCode=${?}
  if [[ $exitCode -ne 0 ]]
  then
    EchoText "Could not alter the META_DATABASES table. Exiting.."
  else 
    configure_java
    check_strongPassphraseFile
    ${JAVA_HOME}/bin/java -d64 -Dpname="DBUsers" -DCONF_DIR=${CONF_DIR} -classpath ${CPATH} com.ericsson.eniq.repository.dbusers.UpdateDBPass "ALL" >> ${LOGFILE}
	exitCode=${?}
  fi
  if [[ $exitCode -ne 0 ]]
  then
    EchoText "Could not encrypt the passwords in META_DATABASES table. Exiting.."
  else
  	EchoText "Encrypted the passwords in META_DATABASES table..."
  fi
     
  remove_lock_file
  
  exit ${exitCode}
}
########################################################################
# Function: check_lock_file_presence 
# Checks if the lock file is present
#
# Arguments: None
#
# Return Values: None
check_lock_file_presence()
{
  if [ -r $LOCK_FILE ]
  then
    EchoText "One instance of this process is already running. Hence aborting."
    exit 10
  else
    touch $LOCK_FILE
    if [ $? -ne 0 ]; then
      EchoText "Could not write to file $LOCK_FILE"
      exit 2
    fi
  fi
}
########################################################################
# Function: remove_lock_file
# Removes/Deletes lock file once the script terminates
#
# Arguments: None
#
# Return Values: None
remove_lock_file()
{
  if [ -f $LOCK_FILE ]; then
    rm -rf $LOCK_FILE 2>&1 > /dev/null
    if [ -f "$LOCK_FILE" ]; then
      EchoText "\nFailed to delete lock file $LOCK_FILE."
    fi
  fi
}
check_newPassword(){
password_length=${#NEW_PASSWORD}
	
    if [ "$NEW_PASSWORD" != "$NEW_PASSWORD_reenter" ] ; then
		EchoText "Mismatch in new password and re-entered new password. Please enter correctly."
		remove_lock_file
		exit 10
	elif  [ -z "${NEW_PASSWORD}" ] ; then
		EchoText "The new password cannot be empty."
		remove_lock_file
		exit 10
	elif [[ "${NEW_PASSWORD}" =~ ^.*[[:space:]]+.*$ ]] ; then
		EchoText "The new password cannot contain white spaces."
		remove_lock_file
		exit 10
	elif [[ "${NEW_PASSWORD}" =~ ^.*\\+.*$ ]] ; then
		EchoText "The new password entered is not compliant with the Password Policies defined. It should not contain a '\\' character."
		remove_lock_file
		exit 10
	elif [[ "$DBUSER" == "dcuser" && ${password_length} -lt 8 ]]; then
		EchoText "The new password length should not be less than 8 characters."
		remove_lock_file
		exit 10
	elif [[ ${password_length} -gt 128 ]]; then
		EchoText "The new password length should not be more than 128 characters."
		remove_lock_file
		exit 10
	## In order to restrict any character in the given Password, the below code can be uncommented.
    ## elif [[ "${NEW_PASSWORD}" =~ ^.*[\'\"]+.*$ ]] ; then
      ## echo "The new password entered is not compliant with the Password Policy as it contains single quote (') or double quotes (\") characters."
	  ## continue
	fi
}
check_strongPassphraseFile(){
if [ -f /eniq/installation/config/strong_passphrase ]; then
                if [ -s /eniq/installation/config/strong_passphrase ]; then
                                        pass_phrase=`cat /eniq/sw/conf/strong_passphrase`
                                else
                echo "Passphrase file is empty.Hence aborting."
                exit 1
        fi
 else
                if [ -f "/eniq/sw/conf/strong_passphrase" ]; then
                                if [ -s "/eniq/sw/conf/strong_passphrase" ]; then
                                        pass_phrase=`cat /eniq/sw/conf/strong_passphrase`
                                else
                                                                echo "Passphrase file is empty.Hence aborting."
                                                                exit 1
                                        fi
                else
                echo "Passphrase file does not exist.Hence aborting"
                exit 1
fi
fi
}
############################ Main Body #################################
. /eniq/home/dcuser/.profile
. /eniq/sybase_iq/IQ-*/IQ-*.sh
sybase_env_variables_ec=$?
if [ $sybase_env_variables_ec -ne 0 ]; then
    EchoText "Unable to find Sybase environment variables"
fi
DBISQL=$(which dbisql)
if [ -z "${CONF_DIR}" ] ; then
  EchoText "ERROR: CONF_DIR is not set"
  exit 1
fi
if [ ! -r "${CONF_DIR}/niq.rc" ] ; then
  EchoText "ERROR: Source file is not readable at ${CONF_DIR}/niq.rc"
  exit 2
fi
. ${CONF_DIR}/niq.rc
LOCK_FILE=${CONF_DIR}/.changeUserPassLock.tmp
BY_PASS="False"
check_lock_file_presence
while getopts  "u:o:p:r:af" flag ; do
  case $flag in
  a)  encrypt_all_passwords
      ;;
  f)  BY_PASS="True"
      ;;
  u)  [[ -z "$OPTARG" || "$OPTARG" == "" ]] && usage_msg
      DBUSER="$OPTARG"
      ;;
  o)  [[ -z "$OPTARG" || "$OPTARG" == "" ]] && EchoText "-o option expects an argument. Incorrect usage, hence exiting..." && remove_lock_file && exit 10
      OLD_PASSWORD="$OPTARG"
      ;;
	  
  p)  [[ -z "$OPTARG" || "$OPTARG" == "" ]] && EchoText "-p option expects an argument. Incorrect usage, hence exiting..." && remove_lock_file && exit 10
      NEW_PASSWORD="$OPTARG"
      ;;
  r)  [[ -z "$OPTARG" || "$OPTARG" == "" ]] && EchoText "-r option expects an argument. Incorrect usage, hence exiting..." && remove_lock_file && exit 10
      NEW_PASSWORD_reenter="$OPTARG"
      ;;
  \?) usage_msg
      ;;
  esac
done
[[ -z "$DBUSER" ]] && usage_msg
[[ -z "$DBUSER" ]] && [[ -z "$OLD_PASSWORD" ]] && [[ -z "$NEW_PASSWORD" ]] && [[ -z NEW_PASSWORD_reenter ]] && usage_msg && remove_lock_file && exit 10
configure_java
if [ "$BY_PASS" != "True" ]; then
	if [[ "$#" -gt 2 && "$#" -lt 8 ]] || [[ "$#" -gt 8 ]]; then
		usage_msg
		remove_lock_file
		exit 10
	fi
	
	if [ "$#" -eq 8 ]; then
		if [[ ! -z "$DBUSER" ]]; then
			if  [[ ! -z "$OLD_PASSWORD" ]]; then 
				if [[ ! -z "$NEW_PASSWORD" ]]; then
					if [[ ! -z "$NEW_PASSWORD_reenter" ]]; then
						check_newPassword $NEW_PASSWORD $NEW_PASSWORD_reenter
						check_strongPassphraseFile
						${JAVA_HOME}/bin/java -d64 -Dpname="DBUsers" -DCONF_DIR=${CONF_DIR} -classpath ${CPATH} com.ericsson.eniq.repository.dbusers.UpdateDBPass ${DBUSER} ${OLD_PASSWORD} ${NEW_PASSWORD} >> ${LOGFILE}
 E=${?}
                if [ ${E} -eq 0 ]; then
                        if [ "$DBUSER" == "dcuser" ]; then
                                rm -rf ${CONF_DIR}/dcuser_password_file
                                touch ${CONF_DIR}/dcuser_password_file
                cat /eniq/home/dcuser/dcuser_encrypt.txt > ${CONF_DIR}/dcuser_password_file
                            EchoText "Password updated in dcuser_password_file"
                            rm -rf /eniq/home/dcuser/dcuser_encrypt.txt
                            EchoText "Password updated successfully for: ${DBUSER}"

                        else
                        EchoText "Password updated successfully for: ${DBUSER}"
                        fi
                else
                        EchoText "Password updated failed for: ${DBUSER}"
                fi
					else
						EchoText "-r takes a new password reenter. Please enter the new password again"
						usage_msg
						remove_lock_file
						exit 10
					fi
				else
					EchoText "-p takes a new password . Please enter the password"
					usage_msg
					remove_lock_file
					exit 10
				fi
			else
				EchoText "-o takes a old password. Please enter the old password"
				usage_msg
				remove_lock_file
				exit 10
			fi
		else
			EchoText "-u takes a username. Please enter the username."
			usage_msg
			remove_lock_file
			exit 10
		fi
	else
 check_strongPassphraseFile
		[[ -z "$DBUSER" ]] && remove_lock_file && usage_msg && exit 10
		. /eniq/installation/core_install/lib/common_functions.lib
DEFAULTDCUSERPASSWORD=`inigetpassword SunOS_USER_1 -v password -f  /eniq/installation/config/SunOS.ini`
dcuser_encryption_flag=`iniget SunOS_USER_1 -v dcuser_encryption_flag -f /eniq/installation/config/SunOS.ini`
        inputFile="${CONF_DIR}/dcuser_password_file"
		while IFS= read -r line
		do
		    password="$line"
        done <"$inputFile"
. /eniq/sybase_iq/IQ-*/IQ-*.sh
DBISQL=$(which dbisql)
ETLREPUSER=`inigetpassword REP -v ETLREPUsername -f ${CONF_DIR}/niq.ini`
  ETLREPPASSWORD=`inigetpassword REP -v ETLREPPassword -f ${CONF_DIR}/niq.ini`
  REP_PORT=`iniget REP -v PortNumber -f ${CONF_DIR}/niq.ini`
  REP_SERVER_NAME=`iniget REP -v ServerName -f ${CONF_DIR}/niq.ini`
  
  connection_string_decrypt="-c \"eng=${REP_SERVER_NAME};links=tcpip{host=${REP_SERVER_NAME};port=${REP_PORT}};uid=$ETLREPUSER;pwd=$ETLREPPASSWORD\" -onerror exit -nogui"
  connection_string=/var/tmp/encrypt_$$.file  
  get_encrypt_file "${connection_string_decrypt}" "${connection_string}"
encryptionFlagMetadatabase=`$DBISQL @${connection_string} "select encryption_flag from meta_databases where type_name='dcuser' and connection_name='engine'"|$EGREP -v '(----|encryption_flag|rows)' | $SED -e 's/\ //g'`

if [[ "$encryptionFlagMetadatabase" == "Y" || "$encryptionFlagMetadatabase" == "y"  ]]; then
		DECODEDPASSWORDFROMFILE=$(echo "$password" | openssl enc -d -base64)
		
elif  [[ "$encryptionFlagMetadatabase" == "YY" || "$encryptionFlagMetadatabase" == "yy" ]]; then
		 DECODEDPASSWORDFROMFILE="$(echo "$password" | openssl enc -aes-256-ctr -md sha512 -a -d -salt -pass pass:${pass_phrase})"
		
fi

        if [[ "$dcuser_encryption_flag" == "y" || "$dcuser_encryption_flag" == "Y" ]]; then
         	DECODEDEFAULTDCUSERPASSWORD=$(echo "$DEFAULTDCUSERPASSWORD" | openssl enc -d -base64)
        else
    		 DECODEDEFAULTDCUSERPASSWORD="$(echo "$DEFAULTDCUSERPASSWORD" | openssl enc -aes-256-ctr -md sha512 -a -d -salt -pass pass:${pass_phrase})"
	fi
		while :; do
		    if [ "$DBUSER" == "dcuser" ] && [ "$DECODEDEFAULTDCUSERPASSWORD" == "$DECODEDPASSWORDFROMFILE" ]
			then
			    OLD_PASSWORD=$DECODEDEFAULTDCUSERPASSWORD
				echo $OLD_PASSWORD
			else
			    EchoText "Enter Old Password:"
			    read -s OLD_PASSWORD
		    fi
	EchoText "Enter New Password:"
			read -rs NEW_PASSWORD
			EchoText "Re-enter New Password:"
			read -rs NEW_PASSWORD_reenter
			password_length=${#NEW_PASSWORD}
	
			if [ "$NEW_PASSWORD" != "$NEW_PASSWORD_reenter" ] ; then
				EchoText "Mismatch in new password and re-entered new password. Please enter correctly."
				continue
			elif  [ -z "${NEW_PASSWORD}" ] ; then
				EchoText "The new password cannot be empty."
				continue
			elif [[ "${NEW_PASSWORD}" =~ ^.*[[:space:]]+.*$ ]] ; then
				EchoText "The new password cannot contain white spaces."
				continue
			elif [[ "${NEW_PASSWORD}" =~ ^.*\\+.*$ ]] ; then
				EchoText "The new password entered is not compliant with the Password Policies defined. It should not contain a '\\' character."
				continue
			elif [[ "$DBUSER" == "dcuser" && ${password_length} -lt 8 ]]; then
				EchoText "The new password length should not be less than 8 characters."
				continue
			elif [[ ${password_length} -gt 128 ]]; then
				EchoText "The new password length should not be more than 128 characters."
				continue
			## In order to restrict any character in the given Password, the below code can be uncommented.
			## elif [[ "${NEW_PASSWORD}" =~ ^.*[\'\"]+.*$ ]] ; then
			  ## echo "The new password entered is not compliant with the Password Policy as it contains single quote (') or double quotes (\") characters."
			  ## continue
			fi
			break
		done
		${JAVA_HOME}/bin/java -d64 -Dpname="DBUsers" -DCONF_DIR=${CONF_DIR} -classpath ${CPATH} com.ericsson.eniq.repository.dbusers.UpdateDBPass ${DBUSER} ${OLD_PASSWORD} ${NEW_PASSWORD} >> ${LOGFILE}
		E=${?}
		if [ ${E} -eq 0 ]; then
			if [ "$DBUSER" == "dcuser" ]; then
				rm -rf ${CONF_DIR}/dcuser_password_file
				touch ${CONF_DIR}/dcuser_password_file
                cat /eniq/home/dcuser/dcuser_encrypt.txt > ${CONF_DIR}/dcuser_password_file
                           echo "Password updated in dcuser pwd file"
			    rm -rf /eniq/home/dcuser/dcuser_encrypt.txt
			    EchoText "Password updated successfully for: ${DBUSER}"
			
			else
			EchoText "Password updated successfully for: ${DBUSER}"
			fi
		else
			EchoText "Password updated failed for: ${DBUSER}"
		fi	
		
	fi
 
else
  [[ -z "$NEW_PASSWORD" ]] && EchoText "The utility should be called with -p option when -f is enabled. Incorrect usage, hence exiting..." && remove_lock_file && exit 10
check_strongPassphraseFile
${JAVA_HOME}/bin/java -d64 -Dpname="DBUsers" -DCONF_DIR=${CONF_DIR} -classpath ${CPATH} com.ericsson.eniq.repository.dbusers.UpdateDBPass "ByPass" ${DBUSER} ${NEW_PASSWORD} >> ${LOGFILE}
  E=${?}
  if [ ${E} -eq 0 ]; then
			if [ "$DBUSER" == "dcuser" ]; then
				rm -rf ${CONF_DIR}/dcuser_password_file
				touch ${CONF_DIR}/dcuser_password_file
			     cat /eniq/home/dcuser/dcuser_encrypt.txt > ${CONF_DIR}/dcuser_password_file
			    rm -rf /eniq/home/dcuser/dcuser_encrypt.txt
			    EchoText "Password updated successfully for: ${DBUSER}"
			
			else
			EchoText "Password updated successfully for: ${DBUSER}"
			fi
		else
			EchoText "Password updated failed for: ${DBUSER}"
		fi
  fi
remove_lock_file
exit ${E}
